/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.74
 * Generated at: 2023-05-27 09:13:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Ex08_005fApplication_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
 
/* 
webproject 생성 >> Template 구조 >> WEB-INF >> web.xml 제공 (웹어플리케이션 전체 환경설정)

web.xml (서버가 시작되면 제일 먼저 loading 되고 해석되고 실행)
<welcome-file>index.htm</welcome-file> 웹 사이트 기본 페이지 설정
ex) http://192.168.0.30:8090/WebJPS/ 엔터하면 주소가 없음 > 페이지를 서비스 해야하긴함. > 그럴때 default 페이지를 구성하는 것이 welcome-file이고 이렇일들을 하는 파일이 xml임

/WebJSP >> 웹 프로젝트 이름 , 가상 디렉토리, context root (문맥, 흐름, 전체)
웹 경로 (가상경로) : http://192.168.0.30:8090/WebJPS
> 실 경로 : C:\Douzone\Web\WebClient\WebJSP\src\main\webapp 이게 물리적 경로. 이것과 가상경로를 맵핑해주는 것. 
	위 경로 안의 자원을 서비스 하겠다.
	
  서비스 자원 : html, htm, css, js, json, txt, jsp

  >> 생성하는 모든 자원은 scope
  >> a.jsp > <% String s="A"    >> s변수는 a.jsp 안에서만 유효
  >> b.jsp > <% String s="A"    >> s변수는 b.jsp 안에서만 유효
  >> c.jsp > <% String s="A"    >> s변수는 c.jsp 안에서만 유효
  
  a.jsp, b.jsp, c.jsp 페이지에서 공유할 수 있는 자원은 ?
  답은 web.xml 환경설정 파일 > 서버 시작 > 가장 해석 (loading)
  
  <context-param>
	<description>기본파일 업로드 경로</description>
	<param-name>filepath</param-name>
	<param-value>C:\\web\\download</param-value>
  </context-param>
  
  web.xml 자원에 접근 방법
  Application 객체 (WAS 제공)
  Application >> web.xml 접근 >> 자원 read 가능
  
  WebApp 생성 >> WEB-INF	제공받아요 >> lib (jar파일)
  								>> web.xml (환경설정파일)
  WEB-INF 보안폴더 : Client 접근하게 되면 없는 페이지를 리턴 (접근 불가)
  
  http://192.168.0.39:8090/WebJSP/WEB-INF/web.xml 엔터 서버는 404 전달
  
  WEB-INF >> views >> member >> register.jsp 등등
  					>> admin >> admin.jsp
  클라이언트가 직접 보아서는 안되는 페이지는 보안폴더에 숨김 .... ^^ 
  include, forward 이런 방식으로 .... 보여주어요....
  
  # web.xml 요약
  웹어플리케이션 전체 환경설정
  서버가 시작되면 제일 먼저 loading 되고 해석되고 실행
  물리적 경로  안의 자원을 서비스할 수 있도록 가상경로를 맵핑해줌
  가장먼저 로딩되서 메모리에 올라가므로 전역자원을 여기다가 만듦
  xml파일의 param값에 대한 접근은 application객체가 담당하고 있다. ex) application.getInitParameter("filepath");
  xml파일 변경시 톰캣 서버 재시작 해야함!
  
  WEB-INF 보안폴더 : Client 접근하게 되면 없는 페이지를 리턴 (접근 불가)
  클라이언트가 직접 보아서는 안되는 페이지는 보안폴더에 숨김 
  
*/

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"UTF-8\">\r\n");
      out.write("		<title>Insert title here</title>\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("		<h3>Applicaton 객체(WAS 제공)</h3>\r\n");
      out.write("		<p>전역적인 자원 !</p>\r\n");
      out.write("		");
 
			String param = application.getInitParameter("email");
			out.print("<h3>" + param + "</h3>");
			
			out.print("<hr>");
			
			String param2 = application.getInitParameter("filepath");
			out.print("<h3>" + param2 + "</h3>");
		
      out.write("\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
